// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mele/treasury/v1beta1/treasury.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the treasury module.
type Params struct {
	Managers                         []string                                 `protobuf:"bytes,1,rep,name=managers,proto3" json:"managers,omitempty" yaml:"managers"`
	DisbursementDelayThresholdAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=disbursement_delay_threshold_amount,json=disbursementDelayThresholdAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"disbursement_delay_threshold_amount" yaml:"disbursement_delay_threshold_amount"`
	DisbursementDelayDuration        string                                   `protobuf:"bytes,3,opt,name=disbursement_delay_duration,json=disbursementDelayDuration,proto3" json:"disbursement_delay_duration,omitempty" yaml:"disbursement_delay_duration"`
	MintEnabled                      bool                                     `protobuf:"varint,4,opt,name=mint_enabled,json=mintEnabled,proto3" json:"mint_enabled,omitempty" yaml:"mint_enabled"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetManagers() []string {
	if m != nil {
		return m.Managers
	}
	return nil
}

func (m *Params) GetDisbursementDelayThresholdAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.DisbursementDelayThresholdAmount
	}
	return nil
}

func (m *Params) GetDisbursementDelayDuration() string {
	if m != nil {
		return m.DisbursementDelayDuration
	}
	return ""
}

func (m *Params) GetMintEnabled() bool {
	if m != nil {
		return m.MintEnabled
	}
	return false
}

type Treasury struct {
	MintGenesisSupply bool                                     `protobuf:"varint,1,opt,name=mint_genesis_supply,json=mintGenesisSupply,proto3" json:"mint_genesis_supply,omitempty" yaml:"mint_genesis_supply"`
	TargetSupply      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=target_supply,json=targetSupply,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"target_supply" yaml:"target_supply"`
	Distributed       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=distributed,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"distributed" yaml:"distributed"`
	Burned            github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=burned,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"burned" yaml:"burned"`
}

func (m *Treasury) Reset()         { *m = Treasury{} }
func (m *Treasury) String() string { return proto.CompactTextString(m) }
func (*Treasury) ProtoMessage()    {}
func (*Treasury) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{1}
}
func (m *Treasury) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Treasury) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Treasury.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Treasury) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Treasury.Merge(m, src)
}
func (m *Treasury) XXX_Size() int {
	return m.Size()
}
func (m *Treasury) XXX_DiscardUnknown() {
	xxx_messageInfo_Treasury.DiscardUnknown(m)
}

var xxx_messageInfo_Treasury proto.InternalMessageInfo

func (m *Treasury) GetMintGenesisSupply() bool {
	if m != nil {
		return m.MintGenesisSupply
	}
	return false
}

func (m *Treasury) GetTargetSupply() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TargetSupply
	}
	return nil
}

func (m *Treasury) GetDistributed() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Distributed
	}
	return nil
}

func (m *Treasury) GetBurned() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Burned
	}
	return nil
}

type Disbursement struct {
	Operator     string                                   `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty" yaml:"operator"`
	Recipient    string                                   `protobuf:"bytes,2,opt,name=recipient,proto3" json:"recipient,omitempty" yaml:"operator"`
	Amount       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	ScheduledAt  string                                   `protobuf:"bytes,4,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty" yaml:"scheduled_at"`
	ScheduledFor string                                   `protobuf:"bytes,5,opt,name=scheduled_for,json=scheduledFor,proto3" json:"scheduled_for,omitempty" yaml:"scheduled_for"`
	Reference    string                                   `protobuf:"bytes,6,opt,name=reference,proto3" json:"reference,omitempty" yaml:"reference"`
	Executed     bool                                     `protobuf:"varint,7,opt,name=executed,proto3" json:"executed,omitempty" yaml:"executed"`
}

func (m *Disbursement) Reset()         { *m = Disbursement{} }
func (m *Disbursement) String() string { return proto.CompactTextString(m) }
func (*Disbursement) ProtoMessage()    {}
func (*Disbursement) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{2}
}
func (m *Disbursement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Disbursement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Disbursement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Disbursement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Disbursement.Merge(m, src)
}
func (m *Disbursement) XXX_Size() int {
	return m.Size()
}
func (m *Disbursement) XXX_DiscardUnknown() {
	xxx_messageInfo_Disbursement.DiscardUnknown(m)
}

var xxx_messageInfo_Disbursement proto.InternalMessageInfo

func (m *Disbursement) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Disbursement) GetRecipient() string {
	if m != nil {
		return m.Recipient
	}
	return ""
}

func (m *Disbursement) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Disbursement) GetScheduledAt() string {
	if m != nil {
		return m.ScheduledAt
	}
	return ""
}

func (m *Disbursement) GetScheduledFor() string {
	if m != nil {
		return m.ScheduledFor
	}
	return ""
}

func (m *Disbursement) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *Disbursement) GetExecuted() bool {
	if m != nil {
		return m.Executed
	}
	return false
}

type Burn struct {
	Operator     string                                   `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty" yaml:"operator"`
	Amount       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount" yaml:"amount"`
	ScheduledAt  string                                   `protobuf:"bytes,4,opt,name=scheduled_at,json=scheduledAt,proto3" json:"scheduled_at,omitempty" yaml:"scheduled_at"`
	ScheduledFor string                                   `protobuf:"bytes,5,opt,name=scheduled_for,json=scheduledFor,proto3" json:"scheduled_for,omitempty" yaml:"scheduled_for"`
}

func (m *Burn) Reset()         { *m = Burn{} }
func (m *Burn) String() string { return proto.CompactTextString(m) }
func (*Burn) ProtoMessage()    {}
func (*Burn) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{3}
}
func (m *Burn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Burn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Burn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Burn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Burn.Merge(m, src)
}
func (m *Burn) XXX_Size() int {
	return m.Size()
}
func (m *Burn) XXX_DiscardUnknown() {
	xxx_messageInfo_Burn.DiscardUnknown(m)
}

var xxx_messageInfo_Burn proto.InternalMessageInfo

func (m *Burn) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *Burn) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Burn) GetScheduledAt() string {
	if m != nil {
		return m.ScheduledAt
	}
	return ""
}

func (m *Burn) GetScheduledFor() string {
	if m != nil {
		return m.ScheduledFor
	}
	return ""
}

type ReferenceAmountInfo struct {
	Reference string `protobuf:"bytes,1,opt,name=reference,proto3" json:"reference,omitempty" yaml:"reference"`
	Amount    string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty" yaml:"amount"`
}

func (m *ReferenceAmountInfo) Reset()         { *m = ReferenceAmountInfo{} }
func (m *ReferenceAmountInfo) String() string { return proto.CompactTextString(m) }
func (*ReferenceAmountInfo) ProtoMessage()    {}
func (*ReferenceAmountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{4}
}
func (m *ReferenceAmountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReferenceAmountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReferenceAmountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReferenceAmountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReferenceAmountInfo.Merge(m, src)
}
func (m *ReferenceAmountInfo) XXX_Size() int {
	return m.Size()
}
func (m *ReferenceAmountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ReferenceAmountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ReferenceAmountInfo proto.InternalMessageInfo

func (m *ReferenceAmountInfo) GetReference() string {
	if m != nil {
		return m.Reference
	}
	return ""
}

func (m *ReferenceAmountInfo) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type MintTreasurySupplyProposal struct {
	Title       string                                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MintTreasurySupplyProposal) Reset()      { *m = MintTreasurySupplyProposal{} }
func (*MintTreasurySupplyProposal) ProtoMessage() {}
func (*MintTreasurySupplyProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{5}
}
func (m *MintTreasurySupplyProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintTreasurySupplyProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintTreasurySupplyProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintTreasurySupplyProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintTreasurySupplyProposal.Merge(m, src)
}
func (m *MintTreasurySupplyProposal) XXX_Size() int {
	return m.Size()
}
func (m *MintTreasurySupplyProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MintTreasurySupplyProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MintTreasurySupplyProposal proto.InternalMessageInfo

type MintTreasurySupplyProposalWithDeposit struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Amount      string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty" yaml:"amount"`
	Deposit     string `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
}

func (m *MintTreasurySupplyProposalWithDeposit) Reset()         { *m = MintTreasurySupplyProposalWithDeposit{} }
func (m *MintTreasurySupplyProposalWithDeposit) String() string { return proto.CompactTextString(m) }
func (*MintTreasurySupplyProposalWithDeposit) ProtoMessage()    {}
func (*MintTreasurySupplyProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{6}
}
func (m *MintTreasurySupplyProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintTreasurySupplyProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintTreasurySupplyProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintTreasurySupplyProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintTreasurySupplyProposalWithDeposit.Merge(m, src)
}
func (m *MintTreasurySupplyProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MintTreasurySupplyProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MintTreasurySupplyProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MintTreasurySupplyProposalWithDeposit proto.InternalMessageInfo

type BurnTreasurySupplyProposal struct {
	Title       string                                   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                                   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *BurnTreasurySupplyProposal) Reset()      { *m = BurnTreasurySupplyProposal{} }
func (*BurnTreasurySupplyProposal) ProtoMessage() {}
func (*BurnTreasurySupplyProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{7}
}
func (m *BurnTreasurySupplyProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnTreasurySupplyProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnTreasurySupplyProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnTreasurySupplyProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnTreasurySupplyProposal.Merge(m, src)
}
func (m *BurnTreasurySupplyProposal) XXX_Size() int {
	return m.Size()
}
func (m *BurnTreasurySupplyProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnTreasurySupplyProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BurnTreasurySupplyProposal proto.InternalMessageInfo

type BurnTreasurySupplyProposalWithDeposit struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	Amount      string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty" yaml:"amount"`
	Deposit     string `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
}

func (m *BurnTreasurySupplyProposalWithDeposit) Reset()         { *m = BurnTreasurySupplyProposalWithDeposit{} }
func (m *BurnTreasurySupplyProposalWithDeposit) String() string { return proto.CompactTextString(m) }
func (*BurnTreasurySupplyProposalWithDeposit) ProtoMessage()    {}
func (*BurnTreasurySupplyProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_9995d5f48b338840, []int{8}
}
func (m *BurnTreasurySupplyProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnTreasurySupplyProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnTreasurySupplyProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnTreasurySupplyProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnTreasurySupplyProposalWithDeposit.Merge(m, src)
}
func (m *BurnTreasurySupplyProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *BurnTreasurySupplyProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnTreasurySupplyProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_BurnTreasurySupplyProposalWithDeposit proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "mele.treasury.v1beta1.Params")
	proto.RegisterType((*Treasury)(nil), "mele.treasury.v1beta1.Treasury")
	proto.RegisterType((*Disbursement)(nil), "mele.treasury.v1beta1.Disbursement")
	proto.RegisterType((*Burn)(nil), "mele.treasury.v1beta1.Burn")
	proto.RegisterType((*ReferenceAmountInfo)(nil), "mele.treasury.v1beta1.ReferenceAmountInfo")
	proto.RegisterType((*MintTreasurySupplyProposal)(nil), "mele.treasury.v1beta1.MintTreasurySupplyProposal")
	proto.RegisterType((*MintTreasurySupplyProposalWithDeposit)(nil), "mele.treasury.v1beta1.MintTreasurySupplyProposalWithDeposit")
	proto.RegisterType((*BurnTreasurySupplyProposal)(nil), "mele.treasury.v1beta1.BurnTreasurySupplyProposal")
	proto.RegisterType((*BurnTreasurySupplyProposalWithDeposit)(nil), "mele.treasury.v1beta1.BurnTreasurySupplyProposalWithDeposit")
}

func init() {
	proto.RegisterFile("mele/treasury/v1beta1/treasury.proto", fileDescriptor_9995d5f48b338840)
}

var fileDescriptor_9995d5f48b338840 = []byte{
	// 888 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0x41, 0x8f, 0xdb, 0x44,
	0x14, 0x8e, 0x37, 0xdb, 0x6d, 0x76, 0x92, 0x85, 0x76, 0x76, 0xa1, 0xee, 0x22, 0xc5, 0xd1, 0x00,
	0x55, 0x5a, 0x41, 0xc2, 0x96, 0x0b, 0x8a, 0xc4, 0x61, 0xc3, 0x52, 0xca, 0x01, 0x54, 0x99, 0x4a,
	0x48, 0x1c, 0x88, 0xc6, 0xf6, 0x6c, 0x32, 0xc2, 0xf6, 0x58, 0x33, 0x63, 0xd4, 0x70, 0xe5, 0xd2,
	0x23, 0x47, 0x8e, 0x7b, 0xac, 0x38, 0xf2, 0x27, 0xd8, 0x63, 0x8f, 0x9c, 0x0c, 0xec, 0x5e, 0x38,
	0x70, 0xf2, 0x2f, 0x40, 0x9e, 0x19, 0x3b, 0x8e, 0xda, 0xb0, 0x9b, 0x1e, 0x97, 0x53, 0xec, 0xf7,
	0xbd, 0xf7, 0xbe, 0xf7, 0xde, 0x37, 0x6f, 0x62, 0xf0, 0x4e, 0x44, 0x42, 0x32, 0x94, 0x9c, 0x60,
	0x91, 0xf2, 0xf9, 0xf0, 0xfb, 0x03, 0x8f, 0x48, 0x7c, 0x50, 0x19, 0x06, 0x09, 0x67, 0x92, 0xc1,
	0x37, 0x0a, 0xaf, 0x41, 0x65, 0x34, 0x5e, 0xfb, 0x7b, 0x53, 0x36, 0x65, 0xca, 0x63, 0x58, 0x3c,
	0x69, 0xe7, 0xfd, 0x5b, 0x3e, 0x13, 0x11, 0x13, 0x13, 0x0d, 0xf8, 0x8c, 0xc6, 0x1a, 0x40, 0xbf,
	0x36, 0xc1, 0xd6, 0x23, 0xcc, 0x71, 0x24, 0xe0, 0x10, 0xb4, 0x22, 0x1c, 0xe3, 0x29, 0xe1, 0xc2,
	0xb6, 0x7a, 0xcd, 0xfe, 0xf6, 0x78, 0x37, 0xcf, 0x9c, 0xd7, 0xe7, 0x38, 0x0a, 0x47, 0xa8, 0x44,
	0x90, 0x5b, 0x39, 0xc1, 0x53, 0x0b, 0xbc, 0x1d, 0x50, 0xe1, 0xa5, 0x5c, 0x90, 0x88, 0xc4, 0x72,
	0x12, 0x90, 0x10, 0xcf, 0x27, 0x72, 0xc6, 0x89, 0x98, 0xb1, 0x30, 0x98, 0xe0, 0x88, 0xa5, 0xb1,
	0xb4, 0x37, 0x7a, 0xcd, 0x7e, 0xfb, 0xfe, 0xed, 0x81, 0xae, 0x61, 0xe0, 0x61, 0x41, 0xca, 0x72,
	0x07, 0x9f, 0x30, 0x1a, 0x8f, 0xbf, 0x3d, 0xcd, 0x9c, 0x46, 0x9e, 0x39, 0xf7, 0x34, 0xd7, 0x25,
	0x72, 0xa2, 0x5f, 0xfe, 0x70, 0xfa, 0x53, 0x2a, 0x67, 0xa9, 0x37, 0xf0, 0x59, 0x34, 0xd4, 0xa9,
	0xcd, 0xcf, 0xfb, 0x22, 0xf8, 0x6e, 0x28, 0xe7, 0x09, 0x11, 0x2a, 0xbd, 0x70, 0x7b, 0xf5, 0x8c,
	0x47, 0x45, 0xc2, 0xc7, 0x65, 0xbe, 0x43, 0x95, 0x0e, 0x1e, 0x83, 0xb7, 0x5e, 0xc2, 0x1a, 0xa4,
	0x1c, 0x4b, 0xca, 0x62, 0xbb, 0xd9, 0xb3, 0xfa, 0xdb, 0xe3, 0x3b, 0x79, 0xe6, 0xa0, 0x95, 0x25,
	0x96, 0xce, 0xc8, 0xbd, 0xfd, 0x02, 0xdd, 0x91, 0xc1, 0xe0, 0x08, 0x74, 0x22, 0x1a, 0xcb, 0x09,
	0x89, 0xb1, 0x17, 0x92, 0xc0, 0xde, 0xec, 0x59, 0xfd, 0xd6, 0xf8, 0x56, 0x9e, 0x39, 0xbb, 0x66,
	0xce, 0x35, 0x14, 0xb9, 0xed, 0xe2, 0xf5, 0x53, 0xfd, 0x36, 0x6a, 0xfd, 0x7c, 0xe2, 0x34, 0xfe,
	0x3e, 0x71, 0x1a, 0xe8, 0xaf, 0x26, 0x68, 0x3d, 0x36, 0xc2, 0xc3, 0x2f, 0xc1, 0xae, 0x0a, 0x9a,
	0x92, 0x98, 0x08, 0x2a, 0x26, 0x22, 0x4d, 0x92, 0x70, 0x6e, 0x5b, 0x2a, 0x73, 0x37, 0xcf, 0x9c,
	0xfd, 0x5a, 0xe6, 0x65, 0x27, 0xe4, 0xde, 0x2c, 0xac, 0x9f, 0x69, 0xe3, 0x57, 0xca, 0x06, 0x9f,
	0x5a, 0x60, 0x47, 0x62, 0x3e, 0x25, 0xb2, 0x4c, 0x75, 0xa1, 0x7e, 0x0f, 0x8d, 0x7e, 0x7b, 0x9a,
	0x69, 0x29, 0x7a, 0x3d, 0xa5, 0x3a, 0x3a, 0xd6, 0x94, 0xf2, 0xa3, 0x05, 0xda, 0x01, 0x15, 0x92,
	0x53, 0x2f, 0x95, 0x24, 0xb0, 0x9b, 0x17, 0x15, 0xf2, 0xc0, 0x14, 0x02, 0x2b, 0x95, 0xca, 0xd8,
	0xf5, 0xca, 0xa8, 0xb3, 0x42, 0x09, 0xb6, 0xbc, 0x94, 0xc7, 0x4a, 0xad, 0x0b, 0xf8, 0x0f, 0x0d,
	0xff, 0x8e, 0xe6, 0xd7, 0x61, 0xeb, 0x51, 0x1b, 0x2e, 0x74, 0xda, 0x04, 0x9d, 0xa3, 0xda, 0x39,
	0x2a, 0xd6, 0x93, 0x25, 0x84, 0x63, 0xc9, 0xb8, 0x12, 0x77, 0x69, 0x3d, 0x4b, 0x04, 0xb9, 0x95,
	0x13, 0x3c, 0x00, 0xdb, 0x9c, 0xf8, 0x34, 0xa1, 0x44, 0xed, 0xe0, 0xca, 0x88, 0x85, 0x57, 0xd1,
	0xaa, 0xd9, 0xd9, 0xe6, 0x9a, 0xad, 0xbe, 0xca, 0x5a, 0x1a, 0xae, 0x62, 0x29, 0x84, 0x3f, 0x23,
	0x41, 0x1a, 0x92, 0x60, 0x82, 0xa5, 0x5a, 0x8a, 0xed, 0xfa, 0x52, 0xd4, 0x51, 0xe4, 0xb6, 0xab,
	0xd7, 0x43, 0x09, 0x3f, 0x06, 0x3b, 0x0b, 0xf4, 0x98, 0x71, 0xfb, 0x9a, 0x0a, 0xb6, 0x17, 0xa7,
	0x71, 0x09, 0x46, 0xee, 0x82, 0xea, 0x01, 0xe3, 0xf0, 0x7e, 0x31, 0xa3, 0x63, 0xc2, 0x49, 0xec,
	0x13, 0x7b, 0x4b, 0x85, 0xee, 0xe5, 0x99, 0x73, 0x43, 0x87, 0x56, 0x90, 0x1a, 0x92, 0x79, 0x2e,
	0x84, 0x20, 0x4f, 0x88, 0xaf, 0x4e, 0xe4, 0x75, 0xb5, 0x65, 0xb5, 0xb1, 0x96, 0x08, 0x72, 0x2b,
	0x27, 0xf4, 0x6c, 0x03, 0x6c, 0x8e, 0x53, 0x1e, 0xaf, 0x2f, 0xe1, 0x42, 0x8f, 0x8d, 0xff, 0x85,
	0x1e, 0xe8, 0x07, 0xb0, 0xeb, 0x96, 0x83, 0xd6, 0x57, 0xf3, 0xe7, 0xf1, 0x31, 0x5b, 0x96, 0xc9,
	0xba, 0x9c, 0x4c, 0x77, 0x6b, 0xb3, 0x2b, 0x02, 0x6e, 0xbe, 0x30, 0x9c, 0xb2, 0xe1, 0xd1, 0xa6,
	0xba, 0x55, 0x7f, 0xb3, 0xc0, 0xfe, 0x17, 0x34, 0x96, 0xe5, 0xcd, 0xaa, 0x2f, 0xa1, 0x47, 0x9c,
	0x25, 0x4c, 0xe0, 0x10, 0xee, 0x81, 0x6b, 0x92, 0xca, 0xd0, 0xf0, 0xbb, 0xfa, 0x05, 0xf6, 0x40,
	0x3b, 0x20, 0xc2, 0xe7, 0x34, 0x51, 0x7f, 0x14, 0x8a, 0xca, 0xad, 0x9b, 0xa0, 0x7f, 0xf9, 0x9d,
	0xfa, 0xa0, 0xd0, 0xf0, 0x55, 0x24, 0x1b, 0x75, 0x9e, 0x9e, 0x38, 0x8d, 0xea, 0xff, 0xe1, 0x1f,
	0x0b, 0xbc, 0xbb, 0xba, 0x93, 0xaf, 0xa9, 0x9c, 0x1d, 0x91, 0x84, 0x09, 0x2a, 0xe1, 0x9d, 0xa5,
	0xa6, 0xc6, 0x37, 0xf2, 0xcc, 0xe9, 0x98, 0x4b, 0xbc, 0x30, 0xa3, 0xb2, 0xcd, 0x8f, 0x5e, 0xd2,
	0xe6, 0xf8, 0xcd, 0xda, 0x4d, 0xbb, 0x00, 0xd1, 0x72, 0xfb, 0x77, 0x6b, 0xed, 0xff, 0xb7, 0x0c,
	0xf0, 0x3d, 0x70, 0x3d, 0xd0, 0x75, 0x99, 0x23, 0x07, 0xf3, 0xcc, 0x79, 0xad, 0x24, 0x50, 0x00,
	0x72, 0x4b, 0x97, 0x51, 0xcb, 0xb4, 0x6c, 0x29, 0xe1, 0x8a, 0xfd, 0xba, 0x1a, 0xc2, 0xad, 0xee,
	0xe4, 0xaa, 0x09, 0x37, 0x7e, 0xf8, 0xec, 0xac, 0x6b, 0x9d, 0x9e, 0x75, 0xad, 0xe7, 0x67, 0x5d,
	0xeb, 0xcf, 0xb3, 0xae, 0xf5, 0xd3, 0x79, 0xb7, 0xf1, 0xfc, 0xbc, 0xdb, 0xf8, 0xfd, 0xbc, 0xdb,
	0xf8, 0xe6, 0x5e, 0x6d, 0x98, 0xc5, 0xb7, 0xae, 0x3f, 0xc3, 0x34, 0x56, 0x4f, 0xc3, 0x27, 0x8b,
	0xaf, 0x63, 0x35, 0x54, 0x6f, 0x4b, 0x7d, 0xcd, 0x7e, 0xf8, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0x9b, 0x2e, 0x78, 0x3b, 0x0b, 0x00, 0x00,
}

func (this *Treasury) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Treasury)
	if !ok {
		that2, ok := that.(Treasury)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MintGenesisSupply != that1.MintGenesisSupply {
		return false
	}
	if len(this.TargetSupply) != len(that1.TargetSupply) {
		return false
	}
	for i := range this.TargetSupply {
		if !this.TargetSupply[i].Equal(&that1.TargetSupply[i]) {
			return false
		}
	}
	if len(this.Distributed) != len(that1.Distributed) {
		return false
	}
	for i := range this.Distributed {
		if !this.Distributed[i].Equal(&that1.Distributed[i]) {
			return false
		}
	}
	if len(this.Burned) != len(that1.Burned) {
		return false
	}
	for i := range this.Burned {
		if !this.Burned[i].Equal(&that1.Burned[i]) {
			return false
		}
	}
	return true
}
func (this *Disbursement) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Disbursement)
	if !ok {
		that2, ok := that.(Disbursement)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if this.Recipient != that1.Recipient {
		return false
	}
	if len(this.Amount) != len(that1.Amount) {
		return false
	}
	for i := range this.Amount {
		if !this.Amount[i].Equal(&that1.Amount[i]) {
			return false
		}
	}
	if this.ScheduledAt != that1.ScheduledAt {
		return false
	}
	if this.ScheduledFor != that1.ScheduledFor {
		return false
	}
	if this.Reference != that1.Reference {
		return false
	}
	if this.Executed != that1.Executed {
		return false
	}
	return true
}
func (this *Burn) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Burn)
	if !ok {
		that2, ok := that.(Burn)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Operator != that1.Operator {
		return false
	}
	if len(this.Amount) != len(that1.Amount) {
		return false
	}
	for i := range this.Amount {
		if !this.Amount[i].Equal(&that1.Amount[i]) {
			return false
		}
	}
	if this.ScheduledAt != that1.ScheduledAt {
		return false
	}
	if this.ScheduledFor != that1.ScheduledFor {
		return false
	}
	return true
}
func (this *MintTreasurySupplyProposalWithDeposit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MintTreasurySupplyProposalWithDeposit)
	if !ok {
		that2, ok := that.(MintTreasurySupplyProposalWithDeposit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Deposit != that1.Deposit {
		return false
	}
	return true
}
func (this *BurnTreasurySupplyProposalWithDeposit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BurnTreasurySupplyProposalWithDeposit)
	if !ok {
		that2, ok := that.(BurnTreasurySupplyProposalWithDeposit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	if this.Deposit != that1.Deposit {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MintEnabled {
		i--
		if m.MintEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.DisbursementDelayDuration) > 0 {
		i -= len(m.DisbursementDelayDuration)
		copy(dAtA[i:], m.DisbursementDelayDuration)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.DisbursementDelayDuration)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisbursementDelayThresholdAmount) > 0 {
		for iNdEx := len(m.DisbursementDelayThresholdAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisbursementDelayThresholdAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTreasury(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Managers) > 0 {
		for iNdEx := len(m.Managers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Managers[iNdEx])
			copy(dAtA[i:], m.Managers[iNdEx])
			i = encodeVarintTreasury(dAtA, i, uint64(len(m.Managers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Treasury) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Treasury) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Treasury) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Burned) > 0 {
		for iNdEx := len(m.Burned) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Burned[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTreasury(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Distributed) > 0 {
		for iNdEx := len(m.Distributed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTreasury(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TargetSupply) > 0 {
		for iNdEx := len(m.TargetSupply) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TargetSupply[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTreasury(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MintGenesisSupply {
		i--
		if m.MintGenesisSupply {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Disbursement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Disbursement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Disbursement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Executed {
		i--
		if m.Executed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ScheduledFor) > 0 {
		i -= len(m.ScheduledFor)
		copy(dAtA[i:], m.ScheduledFor)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.ScheduledFor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ScheduledAt) > 0 {
		i -= len(m.ScheduledAt)
		copy(dAtA[i:], m.ScheduledAt)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.ScheduledAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTreasury(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Burn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Burn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Burn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ScheduledFor) > 0 {
		i -= len(m.ScheduledFor)
		copy(dAtA[i:], m.ScheduledFor)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.ScheduledFor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ScheduledAt) > 0 {
		i -= len(m.ScheduledAt)
		copy(dAtA[i:], m.ScheduledAt)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.ScheduledAt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTreasury(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Operator) > 0 {
		i -= len(m.Operator)
		copy(dAtA[i:], m.Operator)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Operator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReferenceAmountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReferenceAmountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReferenceAmountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Reference) > 0 {
		i -= len(m.Reference)
		copy(dAtA[i:], m.Reference)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Reference)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MintTreasurySupplyProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintTreasurySupplyProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintTreasurySupplyProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTreasury(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MintTreasurySupplyProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintTreasurySupplyProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintTreasurySupplyProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BurnTreasurySupplyProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnTreasurySupplyProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnTreasurySupplyProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTreasury(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BurnTreasurySupplyProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnTreasurySupplyProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnTreasurySupplyProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTreasury(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTreasury(dAtA []byte, offset int, v uint64) int {
	offset -= sovTreasury(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Managers) > 0 {
		for _, s := range m.Managers {
			l = len(s)
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	if len(m.DisbursementDelayThresholdAmount) > 0 {
		for _, e := range m.DisbursementDelayThresholdAmount {
			l = e.Size()
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	l = len(m.DisbursementDelayDuration)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	if m.MintEnabled {
		n += 2
	}
	return n
}

func (m *Treasury) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MintGenesisSupply {
		n += 2
	}
	if len(m.TargetSupply) > 0 {
		for _, e := range m.TargetSupply {
			l = e.Size()
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	if len(m.Distributed) > 0 {
		for _, e := range m.Distributed {
			l = e.Size()
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	if len(m.Burned) > 0 {
		for _, e := range m.Burned {
			l = e.Size()
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	return n
}

func (m *Disbursement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	l = len(m.ScheduledAt)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.ScheduledFor)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	if m.Executed {
		n += 2
	}
	return n
}

func (m *Burn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Operator)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	l = len(m.ScheduledAt)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.ScheduledFor)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	return n
}

func (m *ReferenceAmountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reference)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	return n
}

func (m *MintTreasurySupplyProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	return n
}

func (m *MintTreasurySupplyProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	return n
}

func (m *BurnTreasurySupplyProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovTreasury(uint64(l))
		}
	}
	return n
}

func (m *BurnTreasurySupplyProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovTreasury(uint64(l))
	}
	return n
}

func sovTreasury(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTreasury(x uint64) (n int) {
	return sovTreasury(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Managers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Managers = append(m.Managers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisbursementDelayThresholdAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisbursementDelayThresholdAmount = append(m.DisbursementDelayThresholdAmount, types.Coin{})
			if err := m.DisbursementDelayThresholdAmount[len(m.DisbursementDelayThresholdAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisbursementDelayDuration", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisbursementDelayDuration = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MintEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Treasury) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Treasury: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Treasury: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintGenesisSupply", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MintGenesisSupply = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetSupply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetSupply = append(m.TargetSupply, types.Coin{})
			if err := m.TargetSupply[len(m.TargetSupply)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributed = append(m.Distributed, types.Coin{})
			if err := m.Distributed[len(m.Distributed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Burned", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Burned = append(m.Burned, types.Coin{})
			if err := m.Burned[len(m.Burned)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Disbursement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Disbursement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Disbursement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledFor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Executed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Burn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Burn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Burn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScheduledFor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ScheduledFor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReferenceAmountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReferenceAmountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReferenceAmountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reference", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reference = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintTreasurySupplyProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintTreasurySupplyProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintTreasurySupplyProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintTreasurySupplyProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintTreasurySupplyProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintTreasurySupplyProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnTreasurySupplyProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnTreasurySupplyProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnTreasurySupplyProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnTreasurySupplyProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnTreasurySupplyProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnTreasurySupplyProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTreasury
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTreasury
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTreasury(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTreasury
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTreasury(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTreasury
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTreasury
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTreasury
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTreasury
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTreasury
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTreasury        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTreasury          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTreasury = fmt.Errorf("proto: unexpected end of group")
)
