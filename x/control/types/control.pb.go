// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mele/control/v1beta1/control.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the control module.
type Params struct {
	Enabled  bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:"enabled"`
	Managers []string `protobuf:"bytes,2,rep,name=managers,proto3" json:"managers,omitempty" yaml:"managers"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b083c0bef495ba, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

type Execution struct {
	Content    *types.Any `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Id         uint64     `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" yaml:"id"`
	SubmitTime string     `protobuf:"bytes,3,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty" yaml:"submit_time"`
	Executor   string     `protobuf:"bytes,4,opt,name=executor,proto3" json:"executor,omitempty" yaml:"executor"`
}

func (m *Execution) Reset()         { *m = Execution{} }
func (m *Execution) String() string { return proto.CompactTextString(m) }
func (*Execution) ProtoMessage()    {}
func (*Execution) Descriptor() ([]byte, []int) {
	return fileDescriptor_96b083c0bef495ba, []int{1}
}
func (m *Execution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Execution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Execution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Execution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Execution.Merge(m, src)
}
func (m *Execution) XXX_Size() int {
	return m.Size()
}
func (m *Execution) XXX_DiscardUnknown() {
	xxx_messageInfo_Execution.DiscardUnknown(m)
}

var xxx_messageInfo_Execution proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "mele.control.v1beta1.Params")
	proto.RegisterType((*Execution)(nil), "mele.control.v1beta1.Execution")
}

func init() {
	proto.RegisterFile("mele/control/v1beta1/control.proto", fileDescriptor_96b083c0bef495ba)
}

var fileDescriptor_96b083c0bef495ba = []byte{
	// 411 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xb1, 0x6e, 0xd4, 0x30,
	0x18, 0xc7, 0xe3, 0x6b, 0xd5, 0xde, 0xb9, 0x02, 0x24, 0x73, 0x82, 0x50, 0x81, 0x73, 0xf2, 0x74,
	0x48, 0x10, 0xab, 0x30, 0x20, 0x75, 0x23, 0x88, 0x09, 0x06, 0x14, 0x31, 0xb1, 0x54, 0x4e, 0xce,
	0xa4, 0x96, 0x62, 0xbb, 0x24, 0x4e, 0xd5, 0xbc, 0x05, 0x23, 0x63, 0x47, 0x1e, 0x80, 0x87, 0xa8,
	0x98, 0x3a, 0x32, 0x45, 0x90, 0x5b, 0x98, 0xf3, 0x04, 0x28, 0xf6, 0xf9, 0x74, 0x62, 0xf3, 0x97,
	0xdf, 0xcf, 0xc9, 0xff, 0xff, 0x29, 0x90, 0x48, 0x5e, 0x72, 0x9a, 0x6b, 0x65, 0x2a, 0x5d, 0xd2,
	0xcb, 0x93, 0x8c, 0x1b, 0x76, 0xe2, 0xe7, 0xf8, 0xa2, 0xd2, 0x46, 0xa3, 0xf9, 0xe8, 0xc4, 0xfe,
	0xd9, 0xc6, 0x39, 0x9e, 0x17, 0xba, 0xd0, 0x56, 0xa0, 0xe3, 0xc9, 0xb9, 0xc7, 0x0f, 0x73, 0x5d,
	0x4b, 0x5d, 0x9f, 0x39, 0x90, 0x6b, 0xa1, 0x36, 0xe0, 0xd1, 0x7f, 0x60, 0x1c, 0x3c, 0x2a, 0xb4,
	0x2e, 0x4a, 0x4e, 0xed, 0x94, 0x35, 0x9f, 0x29, 0x53, 0xad, 0x43, 0xe4, 0x0b, 0x3c, 0xf8, 0xc0,
	0x2a, 0x26, 0x6b, 0xf4, 0x0c, 0x1e, 0x72, 0xc5, 0xb2, 0x92, 0xaf, 0x42, 0xb0, 0x00, 0xcb, 0x69,
	0x82, 0x86, 0x2e, 0xba, 0xdb, 0x32, 0x59, 0x9e, 0x92, 0x0d, 0x20, 0xa9, 0x57, 0x10, 0x85, 0x53,
	0xc9, 0x14, 0x2b, 0x78, 0x55, 0x87, 0x93, 0xc5, 0xde, 0x72, 0x96, 0xdc, 0x1f, 0xba, 0xe8, 0x9e,
	0xd3, 0x3d, 0x21, 0xe9, 0x56, 0x3a, 0x9d, 0x7e, 0xbb, 0x8e, 0x82, 0xbf, 0xd7, 0x51, 0x40, 0x7a,
	0x00, 0x67, 0x6f, 0xaf, 0x78, 0xde, 0x18, 0xa1, 0x15, 0x7a, 0x0f, 0x0f, 0xc7, 0xe2, 0x5c, 0x19,
	0xfb, 0xd9, 0xa3, 0x17, 0xf3, 0xd8, 0xa5, 0x8d, 0x7d, 0xda, 0xf8, 0xb5, 0x6a, 0x93, 0xc7, 0x3f,
	0x7f, 0x3c, 0x0f, 0xed, 0x9a, 0x0a, 0x7d, 0xe9, 0x57, 0x14, 0xbf, 0x71, 0x37, 0x53, 0xff, 0x0a,
	0xf4, 0x04, 0x4e, 0xc4, 0x2a, 0x9c, 0x2c, 0xc0, 0x72, 0x3f, 0xb9, 0x33, 0x74, 0xd1, 0xcc, 0x05,
	0x12, 0x2b, 0x92, 0x4e, 0xc4, 0x0a, 0xbd, 0x82, 0x47, 0x75, 0x93, 0x49, 0x61, 0xce, 0x8c, 0x90,
	0x3c, 0xdc, 0x5b, 0x80, 0xe5, 0x2c, 0x79, 0x30, 0x74, 0x11, 0x72, 0xde, 0x0e, 0x24, 0x29, 0x74,
	0xd3, 0x47, 0x21, 0xf9, 0x58, 0x97, 0xdb, 0xc8, 0xba, 0x0a, 0xf7, 0xed, 0xad, 0x9d, 0xba, 0x9e,
	0x90, 0x74, 0x2b, 0x25, 0xef, 0x6e, 0xfe, 0xe0, 0xe0, 0x7b, 0x8f, 0xc1, 0x4d, 0x8f, 0xc1, 0x6d,
	0x8f, 0xc1, 0xef, 0x1e, 0x83, 0xaf, 0x6b, 0x1c, 0xdc, 0xae, 0x71, 0xf0, 0x6b, 0x8d, 0x83, 0x4f,
	0x4f, 0x0b, 0x61, 0xce, 0x9b, 0x2c, 0xce, 0xb5, 0xa4, 0x63, 0xb1, 0xfc, 0x9c, 0x09, 0x65, 0x4f,
	0xf4, 0x6a, 0xfb, 0xbf, 0x98, 0xf6, 0x82, 0xd7, 0xd9, 0x81, 0x5d, 0xc5, 0xcb, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x81, 0x6f, 0x6e, 0x39, 0x4c, 0x02, 0x00, 0x00,
}

func (this *Execution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Execution)
	if !ok {
		that2, ok := that.(Execution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Content.Equal(that1.Content) {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.SubmitTime != that1.SubmitTime {
		return false
	}
	if this.Executor != that1.Executor {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Managers) > 0 {
		for iNdEx := len(m.Managers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Managers[iNdEx])
			copy(dAtA[i:], m.Managers[iNdEx])
			i = encodeVarintControl(dAtA, i, uint64(len(m.Managers[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Execution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Execution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Execution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Executor) > 0 {
		i -= len(m.Executor)
		copy(dAtA[i:], m.Executor)
		i = encodeVarintControl(dAtA, i, uint64(len(m.Executor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubmitTime) > 0 {
		i -= len(m.SubmitTime)
		copy(dAtA[i:], m.SubmitTime)
		i = encodeVarintControl(dAtA, i, uint64(len(m.SubmitTime)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintControl(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintControl(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintControl(dAtA []byte, offset int, v uint64) int {
	offset -= sovControl(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if len(m.Managers) > 0 {
		for _, s := range m.Managers {
			l = len(s)
			n += 1 + l + sovControl(uint64(l))
		}
	}
	return n
}

func (m *Execution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovControl(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovControl(uint64(m.Id))
	}
	l = len(m.SubmitTime)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	l = len(m.Executor)
	if l > 0 {
		n += 1 + l + sovControl(uint64(l))
	}
	return n
}

func sovControl(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozControl(x uint64) (n int) {
	return sovControl(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Managers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Managers = append(m.Managers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Execution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowControl
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Execution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Execution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &types.Any{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubmitTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Executor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowControl
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthControl
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthControl
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Executor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipControl(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthControl
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipControl(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowControl
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowControl
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthControl
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupControl
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthControl
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthControl        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowControl          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupControl = fmt.Errorf("proto: unexpected end of group")
)
