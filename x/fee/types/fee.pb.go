// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mele/fee/v1beta1/fee.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the set of params for the fee module.
type Params struct {
	FeePercentage     string                                   `protobuf:"bytes,1,opt,name=fee_percentage,json=feePercentage,proto3" json:"fee_percentage,omitempty" yaml:"fee_percentage"`
	MinimumFee        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=minimum_fee,json=minimumFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"minimum_fee" yaml:"minimum_fee"`
	MaximumFee        github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=maximum_fee,json=maximumFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"maximum_fee" yaml:"maximum_fee"`
	MelgPrice         string                                   `protobuf:"bytes,4,opt,name=melg_price,json=melgPrice,proto3" json:"melg_price,omitempty" yaml:"melg_price"`
	MelgFeePercentage string                                   `protobuf:"bytes,5,opt,name=melg_fee_percentage,json=melgFeePercentage,proto3" json:"melg_fee_percentage,omitempty" yaml:"melg_fee_percentage"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2e2454fdc3c3f5, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFeePercentage() string {
	if m != nil {
		return m.FeePercentage
	}
	return ""
}

func (m *Params) GetMinimumFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MinimumFee
	}
	return nil
}

func (m *Params) GetMaximumFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.MaximumFee
	}
	return nil
}

func (m *Params) GetMelgPrice() string {
	if m != nil {
		return m.MelgPrice
	}
	return ""
}

func (m *Params) GetMelgFeePercentage() string {
	if m != nil {
		return m.MelgFeePercentage
	}
	return ""
}

type AddFeeExcludedMessageProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MessageType string `protobuf:"bytes,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
}

func (m *AddFeeExcludedMessageProposal) Reset()      { *m = AddFeeExcludedMessageProposal{} }
func (*AddFeeExcludedMessageProposal) ProtoMessage() {}
func (*AddFeeExcludedMessageProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2e2454fdc3c3f5, []int{1}
}
func (m *AddFeeExcludedMessageProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFeeExcludedMessageProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFeeExcludedMessageProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFeeExcludedMessageProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFeeExcludedMessageProposal.Merge(m, src)
}
func (m *AddFeeExcludedMessageProposal) XXX_Size() int {
	return m.Size()
}
func (m *AddFeeExcludedMessageProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFeeExcludedMessageProposal.DiscardUnknown(m)
}

var xxx_messageInfo_AddFeeExcludedMessageProposal proto.InternalMessageInfo

type AddFeeExcludedMessageProposalWithDeposit struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	MessageType string `protobuf:"bytes,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty" yaml:"message_type"`
	Deposit     string `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
}

func (m *AddFeeExcludedMessageProposalWithDeposit) Reset() {
	*m = AddFeeExcludedMessageProposalWithDeposit{}
}
func (m *AddFeeExcludedMessageProposalWithDeposit) String() string { return proto.CompactTextString(m) }
func (*AddFeeExcludedMessageProposalWithDeposit) ProtoMessage()    {}
func (*AddFeeExcludedMessageProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2e2454fdc3c3f5, []int{2}
}
func (m *AddFeeExcludedMessageProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddFeeExcludedMessageProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddFeeExcludedMessageProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddFeeExcludedMessageProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFeeExcludedMessageProposalWithDeposit.Merge(m, src)
}
func (m *AddFeeExcludedMessageProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *AddFeeExcludedMessageProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFeeExcludedMessageProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_AddFeeExcludedMessageProposalWithDeposit proto.InternalMessageInfo

type RemoveFeeExcludedMessageProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	MessageType string `protobuf:"bytes,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
}

func (m *RemoveFeeExcludedMessageProposal) Reset()      { *m = RemoveFeeExcludedMessageProposal{} }
func (*RemoveFeeExcludedMessageProposal) ProtoMessage() {}
func (*RemoveFeeExcludedMessageProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2e2454fdc3c3f5, []int{3}
}
func (m *RemoveFeeExcludedMessageProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveFeeExcludedMessageProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveFeeExcludedMessageProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveFeeExcludedMessageProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFeeExcludedMessageProposal.Merge(m, src)
}
func (m *RemoveFeeExcludedMessageProposal) XXX_Size() int {
	return m.Size()
}
func (m *RemoveFeeExcludedMessageProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFeeExcludedMessageProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFeeExcludedMessageProposal proto.InternalMessageInfo

type RemoveFeeExcludedMessageProposalWithDeposit struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	MessageType string `protobuf:"bytes,3,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty" yaml:"message_type"`
	Deposit     string `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit,omitempty" yaml:"deposit"`
}

func (m *RemoveFeeExcludedMessageProposalWithDeposit) Reset() {
	*m = RemoveFeeExcludedMessageProposalWithDeposit{}
}
func (m *RemoveFeeExcludedMessageProposalWithDeposit) String() string {
	return proto.CompactTextString(m)
}
func (*RemoveFeeExcludedMessageProposalWithDeposit) ProtoMessage() {}
func (*RemoveFeeExcludedMessageProposalWithDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_eb2e2454fdc3c3f5, []int{4}
}
func (m *RemoveFeeExcludedMessageProposalWithDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoveFeeExcludedMessageProposalWithDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoveFeeExcludedMessageProposalWithDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoveFeeExcludedMessageProposalWithDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveFeeExcludedMessageProposalWithDeposit.Merge(m, src)
}
func (m *RemoveFeeExcludedMessageProposalWithDeposit) XXX_Size() int {
	return m.Size()
}
func (m *RemoveFeeExcludedMessageProposalWithDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveFeeExcludedMessageProposalWithDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveFeeExcludedMessageProposalWithDeposit proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "mele.fee.v1beta1.Params")
	proto.RegisterType((*AddFeeExcludedMessageProposal)(nil), "mele.fee.v1beta1.AddFeeExcludedMessageProposal")
	proto.RegisterType((*AddFeeExcludedMessageProposalWithDeposit)(nil), "mele.fee.v1beta1.AddFeeExcludedMessageProposalWithDeposit")
	proto.RegisterType((*RemoveFeeExcludedMessageProposal)(nil), "mele.fee.v1beta1.RemoveFeeExcludedMessageProposal")
	proto.RegisterType((*RemoveFeeExcludedMessageProposalWithDeposit)(nil), "mele.fee.v1beta1.RemoveFeeExcludedMessageProposalWithDeposit")
}

func init() { proto.RegisterFile("mele/fee/v1beta1/fee.proto", fileDescriptor_eb2e2454fdc3c3f5) }

var fileDescriptor_eb2e2454fdc3c3f5 = []byte{
	// 581 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x94, 0xb1, 0x6f, 0xd3, 0x4e,
	0x14, 0xc7, 0xed, 0xe4, 0xd7, 0xfe, 0xda, 0x6b, 0xa9, 0x5a, 0xb7, 0xa5, 0x69, 0x24, 0x7c, 0xc1,
	0x12, 0x28, 0x12, 0x60, 0xab, 0xc0, 0x80, 0x32, 0x81, 0x0b, 0xd9, 0x40, 0x91, 0x85, 0x84, 0xc4,
	0x12, 0x39, 0xf6, 0x8b, 0x7b, 0xc2, 0xf6, 0x59, 0x3e, 0xb7, 0x4a, 0x36, 0x04, 0x4b, 0x25, 0x16,
	0x46, 0xc6, 0x8c, 0x88, 0xbf, 0xa4, 0x63, 0x47, 0x26, 0x83, 0x12, 0x06, 0x66, 0xff, 0x05, 0xc8,
	0x77, 0x4e, 0xe2, 0x54, 0x15, 0xa8, 0x1b, 0x62, 0xf2, 0xbd, 0xf7, 0xbd, 0xf7, 0xee, 0xe3, 0xf7,
	0x95, 0x1e, 0xaa, 0x07, 0xe0, 0x83, 0xd1, 0x07, 0x30, 0x4e, 0x0e, 0x7a, 0x90, 0xd8, 0x07, 0xf9,
	0x59, 0x8f, 0x62, 0x9a, 0x50, 0x65, 0x33, 0xd7, 0xf4, 0x3c, 0x2e, 0xb4, 0xfa, 0x8e, 0x47, 0x3d,
	0xca, 0x45, 0x23, 0x3f, 0x89, 0x7b, 0xf5, 0x3d, 0x87, 0xb2, 0x80, 0xb2, 0xae, 0x10, 0x1c, 0x4a,
	0x42, 0x21, 0x68, 0x3f, 0xaa, 0x68, 0xb9, 0x63, 0xc7, 0x76, 0xc0, 0x94, 0xc7, 0x68, 0xa3, 0x0f,
	0xd0, 0x8d, 0x20, 0x76, 0x20, 0x4c, 0x6c, 0x0f, 0x6a, 0x72, 0x43, 0x6e, 0xae, 0x9a, 0xfb, 0x59,
	0x8a, 0x77, 0x87, 0x76, 0xe0, 0xb7, 0xb4, 0x45, 0x5d, 0xb3, 0xae, 0xf5, 0x01, 0x3a, 0xb3, 0x58,
	0x79, 0x27, 0xa3, 0xb5, 0x80, 0x84, 0x24, 0x38, 0x0e, 0xba, 0x7d, 0x80, 0x5a, 0xa5, 0x51, 0x6d,
	0xae, 0xdd, 0xdf, 0xd7, 0xc5, 0xe3, 0x7a, 0xcf, 0x66, 0x33, 0x4e, 0xfd, 0x90, 0x92, 0xd0, 0x6c,
	0x9f, 0xa5, 0x58, 0xca, 0x52, 0xac, 0x88, 0xf6, 0xa5, 0x5a, 0xed, 0xcb, 0x37, 0xdc, 0xf4, 0x48,
	0x72, 0x74, 0xdc, 0xd3, 0x1d, 0x1a, 0x18, 0xa2, 0x45, 0xf1, 0xb9, 0xc7, 0xdc, 0x37, 0x46, 0x32,
	0x8c, 0x80, 0xf1, 0x36, 0xcc, 0x42, 0x45, 0x65, 0x1b, 0x0a, 0x08, 0x7b, 0x30, 0x83, 0xa8, 0x5e,
	0x15, 0x62, 0x5e, 0x7b, 0x55, 0x08, 0x51, 0x99, 0x43, 0x3c, 0x44, 0x28, 0x00, 0xdf, 0xeb, 0x46,
	0x31, 0x71, 0xa0, 0xf6, 0x1f, 0x9f, 0xe3, 0x6e, 0x96, 0xe2, 0xad, 0xe2, 0x8d, 0x99, 0xa6, 0x59,
	0xab, 0x79, 0xd0, 0xc9, 0xcf, 0xca, 0x0b, 0xb4, 0xcd, 0x95, 0x0b, 0x36, 0x2c, 0xf1, 0x72, 0x35,
	0x4b, 0x71, 0xbd, 0x54, 0x7e, 0xd1, 0x8b, 0xad, 0x3c, 0xdb, 0x2e, 0xfb, 0xd1, 0x5a, 0xf9, 0x34,
	0xc2, 0xd2, 0xcf, 0x11, 0x96, 0xb4, 0x53, 0x19, 0xdd, 0x78, 0xe2, 0xba, 0x6d, 0x80, 0x67, 0x03,
	0xc7, 0x3f, 0x76, 0xc1, 0x7d, 0x0e, 0x8c, 0xd9, 0x1e, 0x74, 0x62, 0x1a, 0x51, 0x66, 0xfb, 0xca,
	0x0e, 0x5a, 0x4a, 0x48, 0xe2, 0x17, 0xa6, 0x5b, 0x22, 0x50, 0x1a, 0x68, 0xcd, 0x05, 0xe6, 0xc4,
	0x24, 0x4a, 0x08, 0x0d, 0x6b, 0x15, 0xae, 0x95, 0x53, 0xca, 0x4d, 0xb4, 0x1e, 0x88, 0x56, 0xdd,
	0x7c, 0x18, 0xb5, 0xaa, 0xb8, 0x52, 0xe4, 0x5e, 0x0e, 0x23, 0x68, 0xad, 0x9f, 0x8e, 0xb0, 0x34,
	0x43, 0x79, 0x5b, 0x41, 0xcd, 0xdf, 0xa2, 0xbc, 0x22, 0xc9, 0xd1, 0x53, 0x88, 0x28, 0x23, 0x89,
	0x72, 0x7b, 0x81, 0xca, 0xdc, 0xcc, 0x52, 0xbc, 0x2e, 0x66, 0xc0, 0xd3, 0xda, 0x94, 0xf3, 0xd1,
	0x25, 0x9c, 0xe6, 0xf5, 0xb9, 0xa9, 0x25, 0x51, 0x5b, 0xe4, 0x6f, 0x5d, 0xc6, 0x6f, 0xee, 0x65,
	0x29, 0xde, 0x9e, 0x0e, 0x7b, 0xae, 0x6a, 0x0b, 0x3f, 0xa6, 0xdc, 0x45, 0xff, 0xbb, 0x02, 0xb4,
	0xb0, 0x58, 0xc9, 0x52, 0xbc, 0x31, 0x7d, 0x91, 0x0b, 0x9a, 0x35, 0xbd, 0xd2, 0x5a, 0x29, 0xc6,
	0x20, 0x6b, 0x1f, 0x64, 0xd4, 0xb0, 0x20, 0xa0, 0x27, 0xf0, 0x37, 0x18, 0xf2, 0xbe, 0x82, 0xee,
	0xfc, 0x89, 0xe6, 0x9f, 0xf7, 0xc4, 0x3c, 0xfc, 0x3c, 0x56, 0xe5, 0xb3, 0xb1, 0x2a, 0x9f, 0x8f,
	0x55, 0xf9, 0xfb, 0x58, 0x95, 0x3f, 0x4e, 0x54, 0xe9, 0x7c, 0xa2, 0x4a, 0x5f, 0x27, 0xaa, 0xf4,
	0xfa, 0x56, 0x69, 0x0b, 0xe4, 0x2b, 0xd7, 0x39, 0xb2, 0x49, 0xc8, 0x4f, 0xc6, 0x80, 0xaf, 0x66,
	0xbe, 0x08, 0x7a, 0xcb, 0x7c, 0xa9, 0x3e, 0xf8, 0x15, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x3c, 0x3d,
	0x36, 0xb3, 0x05, 0x00, 0x00,
}

func (this *AddFeeExcludedMessageProposalWithDeposit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddFeeExcludedMessageProposalWithDeposit)
	if !ok {
		that2, ok := that.(AddFeeExcludedMessageProposalWithDeposit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	if this.Deposit != that1.Deposit {
		return false
	}
	return true
}
func (this *RemoveFeeExcludedMessageProposalWithDeposit) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoveFeeExcludedMessageProposalWithDeposit)
	if !ok {
		that2, ok := that.(RemoveFeeExcludedMessageProposalWithDeposit)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	if this.Deposit != that1.Deposit {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MelgFeePercentage) > 0 {
		i -= len(m.MelgFeePercentage)
		copy(dAtA[i:], m.MelgFeePercentage)
		i = encodeVarintFee(dAtA, i, uint64(len(m.MelgFeePercentage)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MelgPrice) > 0 {
		i -= len(m.MelgPrice)
		copy(dAtA[i:], m.MelgPrice)
		i = encodeVarintFee(dAtA, i, uint64(len(m.MelgPrice)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MaximumFee) > 0 {
		for iNdEx := len(m.MaximumFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MaximumFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MinimumFee) > 0 {
		for iNdEx := len(m.MinimumFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MinimumFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFee(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FeePercentage) > 0 {
		i -= len(m.FeePercentage)
		copy(dAtA[i:], m.FeePercentage)
		i = encodeVarintFee(dAtA, i, uint64(len(m.FeePercentage)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFeeExcludedMessageProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFeeExcludedMessageProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFeeExcludedMessageProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintFee(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddFeeExcludedMessageProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddFeeExcludedMessageProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddFeeExcludedMessageProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintFee(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveFeeExcludedMessageProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveFeeExcludedMessageProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveFeeExcludedMessageProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintFee(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RemoveFeeExcludedMessageProposalWithDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoveFeeExcludedMessageProposalWithDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RemoveFeeExcludedMessageProposalWithDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deposit) > 0 {
		i -= len(m.Deposit)
		copy(dAtA[i:], m.Deposit)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Deposit)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintFee(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintFee(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFee(dAtA []byte, offset int, v uint64) int {
	offset -= sovFee(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeePercentage)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	if len(m.MinimumFee) > 0 {
		for _, e := range m.MinimumFee {
			l = e.Size()
			n += 1 + l + sovFee(uint64(l))
		}
	}
	if len(m.MaximumFee) > 0 {
		for _, e := range m.MaximumFee {
			l = e.Size()
			n += 1 + l + sovFee(uint64(l))
		}
	}
	l = len(m.MelgPrice)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.MelgFeePercentage)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	return n
}

func (m *AddFeeExcludedMessageProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	return n
}

func (m *AddFeeExcludedMessageProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	return n
}

func (m *RemoveFeeExcludedMessageProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	return n
}

func (m *RemoveFeeExcludedMessageProposalWithDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	l = len(m.Deposit)
	if l > 0 {
		n += 1 + l + sovFee(uint64(l))
	}
	return n
}

func sovFee(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFee(x uint64) (n int) {
	return sovFee(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePercentage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinimumFee = append(m.MinimumFee, types.Coin{})
			if err := m.MinimumFee[len(m.MinimumFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaximumFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaximumFee = append(m.MaximumFee, types.Coin{})
			if err := m.MaximumFee[len(m.MaximumFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MelgPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MelgPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MelgFeePercentage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MelgFeePercentage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFeeExcludedMessageProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFeeExcludedMessageProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFeeExcludedMessageProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddFeeExcludedMessageProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddFeeExcludedMessageProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddFeeExcludedMessageProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveFeeExcludedMessageProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveFeeExcludedMessageProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveFeeExcludedMessageProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoveFeeExcludedMessageProposalWithDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFee
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoveFeeExcludedMessageProposalWithDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoveFeeExcludedMessageProposalWithDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFee
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFee
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFee
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFee(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFee
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFee(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFee
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFee
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFee
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFee
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFee
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFee        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFee          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFee = fmt.Errorf("proto: unexpected end of group")
)
